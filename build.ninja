builddir = out

rule compile
    command = $cc -MD -MF $out.d -std=c11 -g -Werror -c $in -o $out
    depfile = $out.d
    deps    = gcc

rule link
    command = $cc $in -o $out && touch $out

rule run
    command = $runtime ./$in > $out

rule index_coverage
    command = /opt/homebrew/opt/llvm/bin/llvm-profdata merge $in -o $out

rule coverage_summary
    command = /opt/homebrew/opt/llvm/bin/llvm-cov report -show-functions -instr-profile $in $
            | tail -n +2 > $out

rule coverage_details
    command = /opt/homebrew/opt/llvm/bin/llvm-cov show --use-color --instr-profile $in > $out

brew         = /opt/homebrew/opt/llvm/bin/clang
clang_cflags = -fcolor-diagnostics -Xclang -nostdsysteminc -Weverything

opt    = clang  $clang_cflags -O2
lto    = clang  $clang_cflags -O2 -flto
x86_64 = clang  $clang_cflags -O2 -arch x86_64 -momit-leaf-frame-pointer
xsan   = clang  $clang_cflags -fsanitize=address,integer,undefined -fno-sanitize-recover=all
lsan   = $brew  $clang_cflags -fsanitize=address,integer,undefined -fno-sanitize-recover=all
wasm   = zig cc $clang_cflags -O2 -target wasm32-wasi
gcc    = /opt/homebrew/bin/gcc-11 -fdiagnostics-color -O3
cov    = $brew  $clang_cflags -fprofile-instr-generate -fcoverage-mapping

build out/opt/weft.o: compile weft.c
    cc = $opt
build out/opt/test.o: compile test.c
    cc = $opt
build out/opt/test: link out/opt/weft.o out/opt/test.o
    cc = $opt
build out/opt/test.ok: run out/opt/test


build out/lto/weft.o: compile weft.c
    cc = $lto
build out/lto/test.o: compile test.c
    cc = $lto
build out/lto/test: link out/lto/weft.o out/lto/test.o
    cc = $lto
build out/lto/test.ok: run out/lto/test


build out/x86_64/weft.o: compile weft.c
    cc = $x86_64
build out/x86_64/test.o: compile test.c
    cc = $x86_64
build out/x86_64/test: link out/x86_64/weft.o out/x86_64/test.o
    cc = $x86_64
build out/x86_64/test.ok: run out/x86_64/test


build out/xsan/weft.o: compile weft.c
    cc = $xsan
build out/xsan/test.o: compile test.c
    cc = $xsan
build out/xsan/test: link out/xsan/weft.o out/xsan/test.o
    cc = $xsan
build out/xsan/test.ok: run out/xsan/test


build out/lsan/weft.o: compile weft.c
    cc = $lsan
build out/lsan/test.o: compile test.c
    cc = $lsan
build out/lsan/test: link out/lsan/weft.o out/lsan/test.o
    cc = $lsan
build out/lsan/test.ok: run out/lsan/test
    runtime = env ASAN_OPTIONS=detect_leaks=1


build out/wasm/weft.o: compile weft.c
    cc = $wasm
build out/wasm/test.o: compile test.c
    cc = $wasm
build out/wasm/test: link out/wasm/weft.o out/wasm/test.o
    cc = $wasm
build out/wasm/test.ok: run out/wasm/test
    runtime = wasmtime

build out/gcc/weft.o: compile weft.c
    cc = $gcc
build out/gcc/test.o: compile test.c
    cc = $gcc
build out/gcc/test: link out/gcc/weft.o out/gcc/test.o
    cc = $gcc
build out/gcc/test.ok: run out/gcc/test

build out/cov/weft.o: compile weft.c
    cc = $cov
build out/cov/test.o: compile test.c
    cc = $cov
build out/cov/test: link out/cov/weft.o out/cov/test.o
    cc = $cov
build out/cov/test.ok | out/cov/test.profraw: run out/cov/test
    runtime = env LLVM_PROFILE_FILE=out/cov/test.profraw
build out/cov/test.profdata:  index_coverage out/cov/test.profraw
build weft.c.summary:       coverage_summary out/cov/test.profdata out/cov/test weft.c
build weft.c.details:       coverage_details out/cov/test.profdata out/cov/test weft.c
