builddir = out

llvm = /opt/homebrew/opt/llvm

rule compile
    command = $cc -MD -MF $out.d -std=c11 -g -Werror -c $in -o $out
    depfile = $out.d
    deps    = gcc

rule link
    command = $cc $in -o $out && touch $out

rule run
    command = $runtime ./$in > $out

rule coverage_merge
    command = $llvm/bin/llvm-profdata merge $in -o $out

rule coverage_summary
    command = $llvm/bin/llvm-cov report -show-functions -instr-profile $in | tail -n +2 > $out

rule coverage_details
    command = $llvm/bin/llvm-cov show --use-color --instr-profile $in > $out

clang        = $llvm/bin/clang
clang_cflags = -fcolor-diagnostics -Weverything -Xclang -nostdsysteminc

opt    = $clang $clang_cflags -O2
lto    = $clang $clang_cflags -O2 -flto
x86_64 = $clang $clang_cflags -O2 -arch x86_64 -momit-leaf-frame-pointer
misc   = $clang $clang_cflags -fsanitize=address,integer,undefined -fno-sanitize-recover=all $
                              -fprofile-instr-generate -fcoverage-mapping
wasmZ  = zig cc $clang_cflags -O2 -msimd128 -target wasm32-wasi
wasmE  = emcc   $clang_cflags -O2 -msimd128
gcc    = /opt/homebrew/bin/gcc-11 -O3 -Wall -Wextra -fdiagnostics-color

build out/opt/weft.o: compile weft.c
    cc = $opt
build out/opt/test.o: compile test.c
    cc = $opt
build out/opt/test: link out/opt/weft.o out/opt/test.o
    cc = $opt
build out/opt/test.ok: run out/opt/test


build out/lto/weft.o: compile weft.c
    cc = $lto
build out/lto/test.o: compile test.c
    cc = $lto
build out/lto/test: link out/lto/weft.o out/lto/test.o
    cc = $lto
build out/lto/test.ok: run out/lto/test


build out/x86_64/weft.o: compile weft.c
    cc = $x86_64
build out/x86_64/test.o: compile test.c
    cc = $x86_64
build out/x86_64/test: link out/x86_64/weft.o out/x86_64/test.o
    cc = $x86_64
build out/x86_64/test.ok: run out/x86_64/test


build out/misc/weft.o: compile weft.c
    cc = $misc
build out/misc/test.o: compile test.c
    cc = $misc
build out/misc/test: link out/misc/weft.o out/misc/test.o
    cc = $misc
build out/misc/test.ok | out/misc/test.profraw: run out/misc/test
    runtime = env ASAN_OPTIONS=detect_leaks=1 LLVM_PROFILE_FILE=out/misc/test.profraw

build out/misc/test.profdata: coverage_merge   out/misc/test.profraw
build weft.c.summary:         coverage_summary out/misc/test.profdata out/misc/test weft.c
build weft.c.details:         coverage_details out/misc/test.profdata out/misc/test weft.c


build out/wasmZ/weft.o: compile weft.c
    cc = $wasmZ
build out/wasmZ/test.o: compile test.c
    cc = $wasmZ -D_POSIX_SOURCE
build out/wasmZ/test: link out/wasmZ/weft.o out/wasmZ/test.o
    cc = $wasmZ
build out/wasmZ/test.ok: run out/wasmZ/test
    runtime = wasmtime --wasm-features=simd


build out/wasmE/weft.o: compile weft.c
    cc = $wasmE
build out/wasmE/test.o: compile test.c
    cc = $wasmE -D_POSIX_SOURCE
build out/wasmE/test.wasm: link out/wasmE/weft.o out/wasmE/test.o
    cc = $wasmE
build out/wasmE/test.ok: run out/wasmE/test.wasm
    runtime = wasmtime --wasm-features=simd


build out/gcc/weft.o: compile weft.c
    cc = $gcc
build out/gcc/test.o: compile test.c
    cc = $gcc
build out/gcc/test: link out/gcc/weft.o out/gcc/test.o
    cc = $gcc
build out/gcc/test.ok: run out/gcc/test
